<?xml version="1.0" encoding="UTF-8"?>
<!-- 配置LoggerConfig，即Appenders的日志级别为WARN -->
<!--        　monitorinterval用于指定log4j自动重新配置的监测间隔时间，-->
<Configuration status="WARN" monitorInterval="30">

    <Properties>
        <!--<Property name="LOG_LEVEL">INFO</Property> -->
        <Property name="LOG_PATTERN">%d{yyyy-MM-dd_HH:mm:ss.SSS} %-5p [%t] %c{3}.%M %L - %m%n %throwable</Property>
        <Property name="LOG_ACCESS_STRING">%d{yyyy-MM-dd_HH:mm:ss.SSS}\t%m%n</Property>
        <Property name="LOG_DIR">D:\Java学习\SpringMvc\spring-mvc-ssm\src\main\resources\log</Property>
    </Properties>
    <!-- Appenders支持配置多个Appender，支持向不同的目标输送日志，本例为配置向控制台输出 -->
    <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout pattern="%d{yyyy/MM/dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
        </Console>


        <RollingRandomAccessFile name="accessLogAppender"
                                 fileName="${LOG_DIR}/access-s.log"
                                 filePattern="${LOG_DIR}/access.%d{yyyy-MM-dd}-%i.log"
                                 immediateFlush="true"
                                 append="true">
            <!--设置格式-->
            <PatternLayout>
                <Pattern>${LOG_ACCESS_STRING}</Pattern>
            </PatternLayout>
            <!-- 设置滚动日志的策略，什么时候进行新建日志文件-->
            <!--  TimeBasedTriggeringPolicy:Policies子节点，基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。
               modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am.
    　　　　    SizeBasedTriggeringPolicy:Policies子节点，基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小.
    　　　　    DefaultRolloverStrategy:用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性)。-->
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="1MB"/>
            </Policies>
            <DefaultRolloverStrategy max="5"/>
        </RollingRandomAccessFile>
        <Async name="accessLogAsync" includeLocation="true">
            <AppenderRef ref="accessLogAppender"/>
        </Async>
    </Appenders>



    <!-- Loggers支持配置多个Logger，可引用不同的目标Appender，也可根据业务需求定制特定要求的Appender -->

    <Loggers>
        <!-- 避免重复打印相同日志additivity-->
        <Logger name="AccessLog" level="debug" additivity="false">
            <AppenderRef ref="accessLogAsync"/>
        </Logger>
        <!--level:日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.-->
        <Root level="info">
            <AppenderRef ref="Console"/>
        </Root>

    </Loggers>
</Configuration>