<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:property-placeholder location="classpath:db.properties"/>
    <!--    <context:property-placeholder location="classpath:mybatis-config.xml"/>-->
    <context:component-scan base-package="com.qiu"/>
    <aop:aspectj-autoproxy/>

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- c3p0连接池的私有属性 -->
        <property name="maxPoolSize" value="30"/>
        <property name="minPoolSize" value="10"/>
        <!-- 关闭连接后不自动commit -->
        <property name="autoCommitOnClose" value="false"/>
        <!-- 获取连接超时时间 -->
        <property name="checkoutTimeout" value="10000"/>
        <!-- 当获取连接失败重试次数 -->
        <property name="acquireRetryAttempts" value="2"/>
    </bean>


    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--指定xml文件位置-->
        <property name="mapperLocations" value="classpath:com/qiu/dao/mapper/xml/*.xml"/>
        <!--        指定mybatsi-xml 主要配置setting typeAliases-->
        <!--        <property name="configLocation" value="mybatis-config.xml"/>-->
        <property name="typeAliasesPackage" value="com.qiu.dao.pojo"/>
    </bean>

    <!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 -->
    <!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="com.qiu.dao.mapper"/>
    </bean>


    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置事务通知属性 -->
    <tx:advice id="txAdvice1" transaction-manager="transactionManager">
        <!-- 定义事务传播属性 -->
        <tx:attributes>
            <!--            <tx:method name="insert*" propagation="REQUIRED" />-->
            <!--            <tx:method name="update*" propagation="REQUIRED" />-->
            <!--            <tx:method name="edit*" propagation="REQUIRED" />-->
            <!--            <tx:method name="save*" propagation="REQUIRED" />-->
            <!--            <tx:method name="add*" propagation="REQUIRED" />-->
            <!--            <tx:method name="new*" propagation="REQUIRED" />-->
            <!--            <tx:method name="set*" propagation="REQUIRED" />-->
            <!--            <tx:method name="remove*" propagation="REQUIRED" />-->
            <!--            <tx:method name="delete*" propagation="REQUIRED" />-->
            <!--            <tx:method name="change*" propagation="REQUIRED" />-->
            <!--            <tx:method name="get*" propagation="REQUIRED" read-only="true" />-->
            <!--            <tx:method name="find*" propagation="REQUIRED" read-only="true" />-->
            <!--            <tx:method name="load*" propagation="REQUIRED" read-only="true" />-->
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>


    <!-- 配置事务切面 -->
    <aop:config>
        <aop:pointcut id="serviceOperation"
                      expression="execution(* com.qiu.server..*.*(..))"/>
        <aop:advisor advice-ref="txAdvice1" pointcut-ref="serviceOperation"/>
    </aop:config>

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 装配 securityManager -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 配置登陆页面 -->
        <property name="loginUrl" value="/"/>
        <!-- 登陆成功后的一面 -->
        <!-- 具体配置需要拦截哪些 URL, 以及访问对应的 URL 时使用 Shiro 的什么 Filter 进行拦截.  -->
        <property name="filterChainDefinitions">
            <value>
                <!-- org.apache.shiro.web.filter.mgt.DefaultFilter
                     anon：匿名过滤器，该过滤器的作用就是用于配置不需要授权就可以直接访问的路径
    　　             authc：校验过滤器，该过滤器的作用就是用于必须经过校验才可以访问的路径（url）
    　　             logout：注销过滤器，该过滤器的作用就是用于注销退出登录
    　　             perms：权限验证过滤器，用于权限验证的 -->
                /=anon
                /toUser = roles[user]
                /toAdmin = roles[admin]
                <!--mysql perms: get -->
                /book/gets = perms[get]
                /logout = logout
                /book/*=authc
            </value>
        </property>
        <!-- Shiro Filter -->
    </bean>

    <!-- 配置缓存管理器 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- 指定 ehcache 的配置文件 -->
        <property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml"/>
    </bean>


    <bean id="hashedCredentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="MD5"/>
        <property name="hashIterations" value="2"/>
    </bean>
    <!-- 配置进行授权和认证的 Realm -->
    <bean id="myRealm" class="com.qiu.myShiro.ShiroDbRealm">
        <property name="credentialsMatcher" ref="hashedCredentialsMatcher"/>
    </bean>

    <!-- 配置 Shiro 的 SecurityManager Bean. -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="realm" ref="myRealm"/>
    </bean>
</beans>